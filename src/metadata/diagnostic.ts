// This file is part of the cargo-actions.
//
// Copyright (c) Andrii Savytskyi <contact@qroc.pro>
//
// For the full copyright and license information, please view
// the LICENSE file that was distributed with this source code.

/// The error code associated to this diagnostic.
export interface DiagnosticCode {
  /// The code itself.
  code: string

  /// An explanation for the code.
  explanation: string | null
}

/// A line of code associated with the Diagnostic.
export interface DiagnosticSpanLine {
  /// The line of code associated with the error.
  text: string

  /// Start of the section of the line to highlight. 1-based, character offset
  // in `text`.
  highlight_start: number

  /// End of the section of the line to highlight. 1-based, character offset
  // in `text`.
  highlight_end: number
}

/// Macro expansion information associated with a diagnostic.
export interface DiagnosticSpanMacroExpansion {
  /// Span where macro was applied to generate this code; note that this may
  // itself derive from a macro (if `span.expansion !== null`).
  span: DiagnosticSpan

  /// name of macro that was applied (e.g., "foo!" or "#[derive(Eq)]").
  macro_decl_name: string

  /// span where macro was defined (if known).
  def_site_span: DiagnosticSpan | null
}

/// A section of the source code associated with a `Diagnostic`.
export interface DiagnosticSpan {
  /// The file name or the macro name this diagnostic comes from.
  file_name: string

  /// The byte offset in the file where this diagnostic starts from.
  byte_start: number

  /// The byte offset in the file where this diagnostic ends.
  byte_end: number

  /// 1-based. The line in the file.
  line_start: number

  /// 1-based. The line in the file.
  line_end: number

  /// 1-based, character offset.
  column_start: number

  /// 1-based, character offset.
  column_end: number

  /// Is this a "primary" span -- meaning the point, or one of the points,
  /// where the error occurred?
  ///
  /// There are rare cases where multiple spans are marked as primary,
  /// e.g. "immutable borrow occurs here" and "mutable borrow ends here" can
  /// be two separate spans both "primary". Top (parent) messages should
  /// always have at least one primary span, unless it has 0 spans. Child
  /// messages may have 0 or more primary spans.
  is_primary: boolean

  /// Source text from the start of line_start to the end of line_end.
  text: DiagnosticSpanLine[]

  /// Label that should be placed at this location (if any).
  label: string | null

  /// If we are suggesting a replacement, this will contain text
  /// that should be sliced in atop this span.
  suggested_replacement: string | null

  /// If the suggestion is approximate.
  suggestion_applicability: Applicability | null

  /// Macro invocations that created the code at this span, if any.
  expansion: DiagnosticSpanMacroExpansion | null
}

/// Whether a suggestion can be safely applied.
export enum Applicability {
  /// The suggested replacement can be applied automatically safely.
  MachineApplicable,

  /// The suggested replacement has placeholders that will need to be manually
  /// replaced.
  HasPlaceholders,

  /// The suggested replacement may be incorrect in some circumstances. Needs
  /// human review.
  MaybeIncorrect,

  /// The suggested replacement will probably not work.
  Unspecified
}

/// The diagnostic level.
export type DiagnosticLevel =
  | 'error: internal compiler error'
  | 'error'
  | 'warning'
  | 'failure-note'
  | 'note'
  | 'help'

/// A diagnostic message generated by rustc.
export interface Diagnostic {
  /// The error message of this diagnostic.
  message: string

  /// The associated error code for this diagnostic.
  code: DiagnosticCode | null

  /// See `DiagnosticLevel`.
  level: DiagnosticLevel

  /// A list of source code spans this diagnostic is associated with.
  spans: DiagnosticSpan[]

  /// Associated diagnostic messages.
  children: Diagnostic[]

  /// The message as rustc would render it.
  rendered: string | null
}
